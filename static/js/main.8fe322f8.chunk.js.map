{"version":3,"sources":["components/Heading.tsx","utils/sounds.ts","hooks/useTimeout.tsx","providers/LoopStateProvider.tsx","components/PlayPauseButton.tsx","components/Pad.tsx","components/Buttons.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Heading","children","className","sounds","Audio","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","id","setTimeout","clearTimeout","LoopStateContext","createContext","useLoopStateContext","useContext","LoopStateProvider","useState","isLoopPlaying","setIsLoopPlaying","allInstrumentsStates","setAllInstrumentsStates","setDelay","getCurrentActiveInstrumentsIndex","flatMap","instrument","index","playOrPauseInstruments","play","activeInstrumentsIndex","instrumentIndex","currentTime","pause","startTimeout","playOrPauseLoop","Provider","value","toggleSingleInstrumentStateByIndex","Array","activeInstruments","length","PlayPauseButton","onClickCallback","state","onClick","Pad","soundSrc","sound","loopStateContext","padStyleColor","setPadStyleColor","newStyleColor","Math","floor","random","src","split","toUpperCase","Buttons","App","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fe322f8.chunk.js","sourcesContent":["import './Heading.css';\r\nimport React from 'react';\r\n\r\nconst Heading: React.FunctionComponent<{children: React.ReactNode}> = ({children}): JSX.Element => {\r\n    return (\r\n        <div className=\"heading\">\r\n            <h1>{children}</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Heading;","export const sounds: HTMLAudioElement[] = [\r\n    new Audio('../../../loop-machine/static/sound(1).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(2).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(3).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(4).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(5).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(6).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(7).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(8).mp3'),\r\n    new Audio('../../../loop-machine/static/sound(9).mp3'),\r\n];","import { useEffect, useRef } from 'react'\r\n\r\nfunction useTimeout(callback: () => void, delay: number | null) {\r\n  const savedCallback = useRef(callback)\r\n\r\n  // Remember the latest callback if it changes.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the timeout.\r\n  useEffect(() => {\r\n    // Don't schedule if no delay is specified.\r\n    if (delay === null) {\r\n      return\r\n    }\r\n\r\n    const id = setTimeout(() => savedCallback.current(), delay)\r\n\r\n    return () => clearTimeout(id)\r\n  }, [delay])\r\n}\r\n\r\nexport default useTimeout;","import { createContext, useContext, useState } from \"react\"\r\nimport type { ReactNode } from 'react';\r\nimport { sounds } from \"../utils/sounds\";\r\nimport useTimeout from \"../hooks/useTimeout\";\r\n\r\nexport type LoopStateContextType = {\r\n    isLoopPlaying: boolean,\r\n    setIsLoopPlaying: (newState: boolean) => void,\r\n    allInstrumentsStates: boolean[],\r\n    setAllInstrumentsStates: (newState: boolean[]) => void,\r\n    playOrPauseLoop: (play: boolean) => void,\r\n    toggleSingleInstrumentStateByIndex: (instrumentIndex: number) => void\r\n};\r\n\r\n/**\r\n * The amount of miliseconds set in the timeout\r\n */\r\nconst timeOutDelay: number = 8000;\r\n\r\nconst LoopStateContext = createContext<LoopStateContextType | null>(null);\r\nexport const useLoopStateContext = () => useContext(LoopStateContext);\r\n\r\nexport const LoopStateProvider = ({ children }: { children: ReactNode }) => {\r\n\r\n    const [isLoopPlaying, setIsLoopPlaying] = useState<boolean>(false);\r\n    const [allInstrumentsStates, setAllInstrumentsStates] = useState<boolean[]>([false, false, false, false, false, false, false, false, false]);\r\n    const [delay, setDelay] = useState<number | null>(null);\r\n\r\n    /**\r\n     * @returns An array of the active instrument's indexes.\r\n     */\r\n    const getCurrentActiveInstrumentsIndex = (): number[] => {\r\n        return allInstrumentsStates.flatMap((instrument: boolean, index: number) => instrument ? index : []);\r\n    };\r\n    /**\r\n     * @param play - if set to true it starts to play, if false it will pause all instruments.\r\n     */\r\n    const playOrPauseInstruments = (play: boolean): void => {\r\n        // check which of the instruments is set to true.\r\n        const activeInstrumentsIndex: number[] = getCurrentActiveInstrumentsIndex();\r\n        // play / pause the audio of these instruments\r\n        if (play) {\r\n            for (let instrumentIndex of activeInstrumentsIndex) {\r\n                sounds[instrumentIndex].currentTime = 0;\r\n                sounds[instrumentIndex].play();\r\n            };\r\n        } else {\r\n            for (let sound of sounds) {\r\n                sound.pause();\r\n            };\r\n        };\r\n    };\r\n    /**\r\n     * Toggles the state of a single instrument boolean state in allInstrumentsStates array.\r\n     * @param instrumentIndex;\r\n     */\r\n    const toggleSingleInstrumentStateByIndex = (instrumentIndex: number): void => {\r\n        allInstrumentsStates[instrumentIndex] = !allInstrumentsStates[instrumentIndex];\r\n        setAllInstrumentsStates(new Array(...allInstrumentsStates));\r\n        // if the new instrument state is false, stop playing instrument immidietly\r\n        if (!allInstrumentsStates[instrumentIndex]) {\r\n            sounds[instrumentIndex].pause();\r\n        };\r\n        // if the new instrument state is true and loop is not playing, start playing loop.\r\n        if (allInstrumentsStates[instrumentIndex] && !isLoopPlaying) {\r\n            playOrPauseLoop(true);\r\n        };\r\n        // if the new instrument state is false and all other instruments are false, stop playing loop.\r\n        const activeInstruments: number[] = getCurrentActiveInstrumentsIndex();\r\n        if (!allInstrumentsStates[instrumentIndex] && !activeInstruments.length){\r\n            playOrPauseLoop(false);\r\n        };\r\n    };\r\n    /**\r\n     * Executes at the end of a timeOut interval.\r\n     */\r\n    const timeOutCallback = (): void => {\r\n        if (isLoopPlaying) {\r\n            playOrPauseInstruments(true);\r\n            startTimeout();\r\n        } else {\r\n            setDelay(null);\r\n        };\r\n    };\r\n    // Instance of the timeout being run recursivly\r\n    const startTimeout = (): void => {\r\n        setDelay(null);\r\n        setDelay(timeOutDelay);\r\n    }\r\n    /**\r\n     * @param play - if set to true it starts to play, if false it will stop the Loop.\r\n     */\r\n    const playOrPauseLoop = (play: boolean): void => {\r\n        setIsLoopPlaying(play);\r\n        playOrPauseInstruments(play);\r\n        if (play) {\r\n            startTimeout();\r\n        } else {\r\n            setDelay(null);\r\n        };\r\n    };\r\n    useTimeout(timeOutCallback, delay);\r\n\r\n    return (\r\n        <LoopStateContext.Provider value={{ isLoopPlaying, setIsLoopPlaying, allInstrumentsStates, setAllInstrumentsStates, toggleSingleInstrumentStateByIndex, playOrPauseLoop }}>\r\n            {children}\r\n        </LoopStateContext.Provider>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\n","import './PlayPauseButton.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FaPlayCircle, FaPauseCircle} from 'react-icons/fa';\r\n\r\ntype PlayPauseButtonProps = {\r\n    onClickCallback: ()=>void,\r\n    state: boolean\r\n};\r\n\r\nconst PlayPauseButton: React.FunctionComponent<PlayPauseButtonProps> = ({onClickCallback, state}) => {\r\n\r\n    return (\r\n        <div className=\"play-pause-btn\" onClick={onClickCallback}>\r\n            <p>{ state ? <FaPauseCircle /> : <FaPlayCircle /> }</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayPauseButton;\r\n","import './Pad.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLoopStateContext } from './../providers/LoopStateProvider';\r\nimport PlayPauseButton from './PlayPauseButton';\r\n\r\ntype PadProps = {\r\n    sound: HTMLAudioElement,\r\n    instrumentIndex: number,\r\n}\r\n\r\nconst Pad: React.FunctionComponent<PadProps> = ({ sound, instrumentIndex }: PadProps) => {\r\n\r\n    const loopStateContext = useLoopStateContext();\r\n\r\n    const [padStyleColor, setPadStyleColor] = useState<string>('pad-not-active')\r\n\r\n    const parseSoundNameFromSrc = (soundSrc: string): string => {\r\n        return soundSrc.split('/')[5].split('.')[0].toUpperCase();\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const newStyleColor: string = loopStateContext?.allInstrumentsStates[instrumentIndex] ? `pad-color-${Math.floor(Math.random()*5)}` : 'pad-not-active';\r\n        setPadStyleColor(newStyleColor);\r\n    }, [loopStateContext?.allInstrumentsStates[instrumentIndex], instrumentIndex])\r\n\r\n    return (\r\n        <div className={`pad ${padStyleColor}`} >\r\n            <div className=\"pad-content\">\r\n            <p>{parseSoundNameFromSrc(sound.src)}</p>\r\n            <PlayPauseButton\r\n            onClickCallback={() => { loopStateContext?.toggleSingleInstrumentStateByIndex(instrumentIndex)}}\r\n            state={loopStateContext?.allInstrumentsStates[instrumentIndex]!}\r\n            ></PlayPauseButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pad;","import React from 'react';\r\nimport { useLoopStateContext } from './../providers/LoopStateProvider';\r\nimport PlayPauseButton from './PlayPauseButton';\r\n\r\ntype ButtonsProps = {}\r\n\r\nconst Buttons: React.FunctionComponent<ButtonsProps> = () => {\r\n\r\n    const loopStateContext = useLoopStateContext();\r\n\r\n    return (\r\n        <div>\r\n            <PlayPauseButton key={1} onClickCallback={() => {loopStateContext?.playOrPauseLoop(!loopStateContext?.isLoopPlaying)}} state={loopStateContext?.isLoopPlaying!} >Button</PlayPauseButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import './App.css';\r\nimport Heading from './components/Heading';\r\nimport { sounds } from './utils/sounds';\r\nimport Pad from './components/Pad';\r\nimport Buttons from './components/Buttons';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Heading>CRAZY LOOPS</Heading>\r\n      <Buttons></Buttons>\r\n      <div className=\"pads-container\">\r\n        {\r\n          sounds.map((sound: HTMLAudioElement, index: number) => {\r\n            return (\r\n              <Pad key={index} sound={sound} instrumentIndex={index} ></Pad>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { LoopStateProvider } from './providers/LoopStateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LoopStateProvider>\n      <App />\n    </LoopStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}